" Plugin -------------------------------
" for neocomplcache --------------------
" Define Settings
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" My Setting
let g:neocomplcache_max_list = 50
let g:neocomplcache_enable_auto_select = 1

" Define dictinary
" let g:neocomplcache_dictionary_filetype_lists = {
  " \ 'default': '',
  " \ 'vimshell': $HOME.'/.vimshell_hist'
  " \}

" Define keyword
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings
imap <C-k> <Plug>(neocomplcache_snippets_expand)
smap <C-k> <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
" inoremap <expr><TAB> neocomplcache#complete_common_string()
noremap  <expr><CR>  neocomplcache#smart_close_popup()."\<CR>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Enable omni completion.
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
" let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete


" for unite.vim ------------------------
let g:unite_update_time = 1000
call unite#custom#substitute('file', '\$\w\+', '\=eval(submatch(0))', 200)

call unite#custom#substitute('file', '[^~.]\zs/', '*/*', 20)
call unite#custom#substitute('file', '/\ze[^*]', '/*', 10)

call unite#custom#substitute('file', '^@@', '\=fnamemodify(expand("#"), ":p:h")."/*"', 2)
call unite#custom#substitute('file', '^@', '\=getcwd()."/*"', 1)
call unite#custom#substitute('file', '^\\', '~/*')

call unite#custom#substitute('file', '^;v', '~/.vim/*')
call unite#custom#substitute('file', '^;r', '\=$VIMRUNTIME."/*"')
call unite#custom#substitute('file', '\*\*\+', '*', -1)
call unite#custom#substitute('file', '^\~', escape($HOME, '\'), -2)
call unite#custom#substitute('file', '\\\@<! ', '\\ ', -20)
call unite#custom#substitute('file', '\\ \@!', '/', -30)

" unite starts in insert mode
let g:unite_enable_start_insert=0

" unite mapping
nnoremap [unite] <Nop>
nmap ,u [unite]
nnoremap <silent>[unite]b :<C-u>Unite buffer<CR>
nnoremap <silent>[unite]c :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent>[unite]f :<C-u>Unite file<CR>
nnoremap <silent>[unite]r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent>[unite]m :<C-u>Unite file_mru<CR>
nnoremap <silent>[unite]t :<C-u>Unite tab<CR>
nnoremap <silent>[unite]tq :<C-u>Unite tab -no-quit<CR>
nnoremap <silent>[unite]u :<C-u>Unite buffer file_mru tab<CR>
nnoremap <silent>[unite]s :<C-u>Unite session<CR>
nnoremap <silent>[unite]a :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file tab<CR>

" unite plugin mapping
nnoremap <silent>[unite]o :<C-u>Unite outline<CR>

" open with separated window
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" open with separated vertical window
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" close on push esc*2
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> q
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>q

" for operator-replace
nmap _ <Plug>(operator-replace)


" for jslint ---------------------------
augroup call_jslint
  autocmd! call_jslint
  autocmd FileType javascript call s:javascript_filetype_settings()
augroup END

function! s:javascript_filetype_settings()
  autocmd BufLeave     <buffer> call jslint#clear()
  autocmd BufWritePost <buffer> call jslint#check()
  autocmd CursorMoved  <buffer> call jslint#message()
endfunction


" for emmet-vim ------------------------
let g:user_emmet_settings = {
\ 'indentation' : '  ',
\ 'lang' : 'ja',
\}
let g:user_emmet_expandabbr_key = '<c-z>'

" for surroud.vim ----------------------
noremap <c-3> ysst

" for NERDCommenter --------------------
" use NERDCommenterToggle c--
let g:NERDCreateDefaultMappings = 0
let NERDSpaceDelims = 1
nmap <c-_> <Plug>NERDCommenterToggle
vmap <c-_> <Plug>NERDCommenterToggle

" for open-browser ---------------------
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

" for jump2pm.vim ----------------------
" au FileType perl :setlocal path+=追加したいパス
noremap fg :call Jump2pm('vne')<CR>
noremap ff :call Jump2pm('e')<CR>
noremap fd :call Jump2pm('sp')<CR>
noremap ft :call Jump2pm('tabe')<CR>

" for vim-quickrun
let g:quickrun_config = {
  \ '_': {
  \   'runner': 'vimproc',
  \   'runner/vimproc/updatetime': '60',
  \   'outputter': 'buffer',
  \   'split': 'botright 50vsp',
  \   'close_on_empty': 1,
  \   'hook/time/enable': 1
  \   },
  \ 'javascript': {
  \   'commond': 'node',
  \   'tempfile': '{tempname()}.js'
  \   }
  \ }
" 'split': 'botright 10sp',
" <C-c>
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"


" for taglist.vim ----------------------
set tags=tags
if filereadable(expand('/Applications/MacVim.app/Contents/MacOS/ctags'))
  let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags'
endif
let Tlist_Exit_OnlyWindow = 1
let Tlist_Show_One_File = 1
nnoremap <silent> <leader>l :TlistToggle<CR>


" for Twitter --------------------------
" let twitvim_login_b64 = "eXV6dWVtb246dmFsa3lyaWUNCg=="
